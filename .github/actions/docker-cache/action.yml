name: 'Optimized Docker Cache Management'
description: 'Advanced caching strategy for large Docker images (2GB+)'

inputs:
  registry:
    description: 'Container registry URL'
    required: true
    default: 'ghcr.io'
  image-name:
    description: 'Image name'
    required: true
  cache-scope:
    description: 'Cache scope (branch name, PR number, etc.)'
    required: true
  github-token:
    description: 'GitHub token for registry access'
    required: true
  build-context:
    description: 'Build context path'
    required: false
    default: '.'
  dockerfile:
    description: 'Dockerfile path'
    required: false
    default: './Dockerfile'

outputs:
  cache-hit:
    description: 'Whether cache was hit'
    value: ${{ steps.cache-check.outputs.cache-hit }}
  image-tag:
    description: 'Built image tag'
    value: ${{ steps.build.outputs.imageid }}

runs:
  using: 'composite'
  steps:
    - name: Convert image name to lowercase
      id: lowercase
      shell: bash
      run: echo "image-name=$(echo '${{ inputs.image-name }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

    - name: Set up Docker Buildx with optimized config
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: |
          image=moby/buildkit:v0.12.0
          network=host
        config-inline: |
          [worker.oci]
            max-parallelism = 4
          [worker.containerd]
            max-parallelism = 4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ inputs.registry }}
        username: ${{ github.actor }}
        password: ${{ inputs.github-token }}

    - name: Check for existing cache
      id: cache-check
      shell: bash
      run: |
        # Check if we have a recent cache
        if docker manifest inspect ${{ inputs.registry }}/${{ steps.lowercase.outputs.image-name }}:cache-${{ inputs.cache-scope }} >/dev/null 2>&1; then
          echo "cache-hit=true" >> $GITHUB_OUTPUT
          echo "‚úÖ Found existing cache for ${{ inputs.cache-scope }}"
        else
          echo "cache-hit=false" >> $GITHUB_OUTPUT
          echo "‚ùå No cache found for ${{ inputs.cache-scope }}"
        fi

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ inputs.registry }}/${{ steps.lowercase.outputs.image-name }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-

    # Multi-layer caching strategy for large images
    - name: Build with multi-layer cache
      id: build
      uses: docker/build-push-action@v5
      with:
        context: ${{ inputs.build-context }}
        file: ${{ inputs.dockerfile }}
        platforms: linux/amd64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        # Advanced cache configuration for large images
        cache-from: |
          type=registry,ref=${{ inputs.registry }}/${{ steps.lowercase.outputs.image-name }}:cache-${{ inputs.cache-scope }}
          type=registry,ref=${{ inputs.registry }}/${{ steps.lowercase.outputs.image-name }}:cache-main
          type=registry,ref=${{ inputs.registry }}/${{ steps.lowercase.outputs.image-name }}:builder-cache-${{ inputs.cache-scope }}
          type=registry,ref=${{ inputs.registry }}/${{ steps.lowercase.outputs.image-name }}:builder-cache-main
        cache-to: |
          type=registry,ref=${{ inputs.registry }}/${{ steps.lowercase.outputs.image-name }}:cache-${{ inputs.cache-scope }},mode=max
          type=registry,ref=${{ inputs.registry }}/${{ steps.lowercase.outputs.image-name }}:builder-cache-${{ inputs.cache-scope }},mode=max,target=builder
        build-args: |
          BUILDKIT_INLINE_CACHE=1
        # Optimize for large images
        outputs: type=image,push=true,compression=gzip,compression-level=6

    - name: Cache statistics
      shell: bash
      run: |
        echo "üìä Docker Cache Statistics:"
        echo "Cache scope: ${{ inputs.cache-scope }}"
        echo "Cache hit: ${{ steps.cache-check.outputs.cache-hit }}"
        echo "Image size:"
        docker images ${{ inputs.registry }}/${{ steps.lowercase.outputs.image-name }} --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}"
