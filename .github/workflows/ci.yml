name: CI

on:
  pull_request:
    branches: [ main ]
  # Note: Using simple workflow - short-lived feature branches ‚Üí main
  # All changes must go through PRs to main branch

# Prevent multiple CI runs for the same PR
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  # Core configuration
  PYTHON_VERSION: "3.11"
  REGISTRY: ghcr.io

  # Derived image names (computed once, used everywhere)
  IMAGE_REPOSITORY: ghcr.io/${{ github.repository }}

  # Cache configuration
  CACHE_MAIN_TAG: cache-main
  BUILDER_CACHE_PREFIX: builder-cache

  # Test configuration
  TEST_TIMEOUT: 30
  HEALTH_CHECK_RETRIES: 12

# Optimized CI strategy for fast PR feedback:
# 1. Fast tests always run (unit, setup validation, MCP protocol)
# 2. Integration tests only when relevant files change
# 3. Parallel test execution for speed
# 4. Comprehensive tests run in scheduled pipeline

jobs:
  # Fast path: Skip Docker build if no relevant changes
  detect-changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      docker-changed: ${{ steps.changes.outputs.docker }}
      code-changed: ${{ steps.changes.outputs.code }}
      integration-changed: ${{ steps.changes.outputs.integration }}
      performance-changed: ${{ steps.changes.outputs.performance }}
      # Computed values for use in other jobs
      image-name: ${{ steps.vars.outputs.image-name }}
      branch-tag: ${{ steps.vars.outputs.branch-tag }}
      cache-tag: ${{ steps.vars.outputs.cache-tag }}
      builder-cache-tag: ${{ steps.vars.outputs.builder-cache-tag }}

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 2

    - uses: dorny/paths-filter@v2
      id: changes
      with:
        filters: |
          docker:
            - 'docker-compose*.yml'
            - 'requirements*.txt'
          code:
            - 'mcp_server/**'
            - 'pyproject.toml'
            - 'tests/**'
            - 'requirements-*.txt'
          integration:
            - 'mcp_server/**'
            - 'tests/integration/**'
            - 'tests/test_e2e_workflow.py'
          performance:
            - 'tests/performance/**'

    # Compute all derived variables once
    - name: Set derived variables
      id: vars
      run: |
        # Repository name in lowercase
        REPO_LOWER=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
        echo "image-name=${REGISTRY}/${REPO_LOWER}" >> $GITHUB_OUTPUT

        # Branch/PR ref sanitized for Docker tags
        SAFE_REF=$(echo "${{ github.ref_name }}" | sed 's/[^a-zA-Z0-9]/-/g')
        echo "branch-tag=${SAFE_REF}" >> $GITHUB_OUTPUT

        # Cache tags
        echo "cache-tag=cache-${SAFE_REF}" >> $GITHUB_OUTPUT
        echo "builder-cache-tag=builder-cache-${SAFE_REF}" >> $GITHUB_OUTPUT

  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: detect-changes
    if: needs.detect-changes.outputs.code-changed == 'true'

    steps:
    - uses: actions/checkout@v4

    - name: Setup Python with caching
      uses: ./.github/actions/setup-python

    - name: Check code formatting with Black
      run: black --check --diff .

    - name: Lint with Ruff
      run: ruff check .

    - name: Type check with MyPy
      run: mypy mcp_server --ignore-missing-imports || echo "‚ö†Ô∏è MyPy found type issues (not blocking)"
      continue-on-error: true

  # Fast tests always run on PRs (unit + setup validation + protocol)
  fast-tests:
    name: Fast Tests (PR)
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: detect-changes
    if: needs.detect-changes.outputs.code-changed == 'true'

    steps:
    - uses: actions/checkout@v4

    - name: Setup Python with caching
      uses: ./.github/actions/setup-python

    - name: Run fast test suite
      run: |
        # Run core fast tests: unit tests + setup validation + MCP protocol
        pytest tests/unit/ tests/test_setup_validation.py tests/test_mcp_protocol.py \
          -v --tb=short --timeout=60 \
          --cov=mcp_server --cov-report=xml --cov-report=term-missing \
          --junitxml=fast-test-results.xml \
          -m "not slow"

    - name: Upload test artifacts on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: fast-test-results
        path: |
          .coverage
          coverage.xml
          fast-test-results.xml
        retention-days: 7

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: fast-tests
        name: codecov-fast
        fail_ci_if_error: false

  # Docker setup test (ChromaDB only)
  docker-setup:
    name: Docker Setup Test
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [detect-changes, lint, test]
    if: |
      needs.detect-changes.outputs.docker-changed == 'true' &&
      needs.lint.result != 'failure' && needs.test.result != 'failure'

    steps:
    - uses: actions/checkout@v4

    - name: Test ChromaDB Docker setup
      run: |
        # Start ChromaDB service
        docker compose up -d

        # Wait for ChromaDB to be ready
        for i in {1..30}; do
          if curl -sf "http://localhost:8000/api/v2/heartbeat" >/dev/null 2>&1; then
            echo "‚úÖ ChromaDB ready"
            break
          fi
          if [ $i -eq 30 ]; then
            echo "‚ùå ChromaDB failed to start"
            docker compose logs
            exit 1
          fi
          sleep 2
        done

        # Clean up
        docker compose down

  # Conditional integration tests (only when integration-relevant files change)
  integration-tests:
    name: Integration Tests (Conditional)
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [detect-changes, lint, fast-tests]
    if: |
      needs.lint.result == 'success' && needs.fast-tests.result == 'success' &&
      needs.detect-changes.outputs.integration-changed == 'true'

    steps:
    - uses: actions/checkout@v4

    - name: Setup Python with caching
      uses: ./.github/actions/setup-python

    - name: Start ChromaDB
      run: |
        # Start ChromaDB service
        docker compose up -d

        # Wait for ChromaDB to be ready
        for i in {1..30}; do
          if curl -sf "http://localhost:8000/api/v2/heartbeat" >/dev/null 2>&1; then
            echo "‚úÖ ChromaDB ready"
            break
          fi
          if [ $i -eq 30 ]; then
            echo "‚ùå ChromaDB failed to start"
            docker compose logs
            exit 1
          fi
          sleep 2
        done

    - name: Run conditional integration tests
      run: |
        # Run integration tests + E2E workflow tests
        pytest tests/integration/ tests/test_e2e_workflow.py \
          -v --tb=short --timeout=120 \
          --junitxml=integration-test-results.xml \
          -m "integration and not slow"

    - name: Upload integration test artifacts
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: integration-test-results
        path: |
          integration-test-results.xml
        retention-days: 7

    - name: Clean up
      if: always()
      run: |
        docker compose down -v || true


  build-status:
    name: Build Status
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [lint, fast-tests, integration-tests]
    if: always()

    steps:
    - name: Check build status
      run: |
        # Define status check function
        check_status() {
          local job=$1
          local status=$2

          if [ "${status}" == "success" ]; then
            echo "‚úÖ ${job}: Passed"
            return 0
          else
            echo "‚ùå ${job}: Failed (${status})"
            return 1
          fi
        }

        # Check all required jobs
        FAILED=0
        check_status "Lint" "${{ needs.lint.result }}" || FAILED=1
        check_status "Fast Tests" "${{ needs.fast-tests.result }}" || FAILED=1

        # Integration tests are conditional
        if [ "${{ needs.integration-tests.result }}" != "skipped" ]; then
          check_status "Integration Tests" "${{ needs.integration-tests.result }}" || FAILED=1
        else
          echo "‚úÖ Integration Tests: Skipped (no relevant changes)"
        fi

        # Create job summary
        echo "## CI Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Lint | ${{ needs.lint.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Fast Tests | ${{ needs.fast-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        if [ "${{ needs.integration-tests.result }}" != "skipped" ]; then
          echo "| Integration Tests | ${{ needs.integration-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| Integration Tests | skipped (conditional) |" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY

        if [ $FAILED -eq 0 ]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ **All CI checks passed!**" >> $GITHUB_STEP_SUMMARY
          echo "üê≥ Docker builds are cached and optimized" >> $GITHUB_STEP_SUMMARY
          echo ""
          echo "‚úÖ All CI checks passed!"
          echo "üê≥ Docker builds are cached and optimized"
          exit 0
        else
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚ùå **Some CI checks failed - see details above**" >> $GITHUB_STEP_SUMMARY
          echo ""
          echo "‚ùå Some CI checks failed - see details above"
          exit 1
        fi
