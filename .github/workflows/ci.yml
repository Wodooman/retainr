name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: "3.11"

jobs:
  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements-dev.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt

    - name: Check code formatting with Black
      run: black --check --diff .

    - name: Lint with Ruff
      run: ruff check .

    - name: Type check with MyPy
      run: mypy mcp_server cli --ignore-missing-imports || echo "⚠️ MyPy found type issues (not blocking)"
      continue-on-error: true

  test:
    name: Test Suite
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-${{ matrix.python-version }}-pip-${{ hashFiles('**/requirements-dev.txt') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.python-version }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt

    - name: Run unit tests
      run: |
        pytest tests/unit/ -v --cov=mcp_server --cov=cli --cov-report=xml --cov-report=term-missing

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements-dev.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt

    - name: Create .env file for Docker Compose
      run: |
        cat > .env << EOF
        RETAINR_MEMORY_DIR=./memory
        RETAINR_CHROMA_HOST=chroma
        RETAINR_CHROMA_PORT=8000
        RETAINR_CHROMA_COLLECTION=retainr_memories
        RETAINR_EMBEDDING_MODEL=all-MiniLM-L6-v2
        EOF

    - name: Start services with Docker Compose
      run: |
        docker compose up -d
        echo "Waiting for services to start..."
        sleep 10

    - name: Check container status
      run: |
        docker compose ps
        docker compose logs chroma
        docker compose logs retainr

    - name: Wait for ChromaDB to be ready
      run: |
        echo "Waiting for ChromaDB on port 8001..."
        timeout 60 bash -c 'until curl -f http://localhost:8001/api/v1/heartbeat; do echo "ChromaDB not ready, waiting..."; sleep 5; done'
        echo "ChromaDB is ready!"

    - name: Wait for retainr server to be healthy
      run: |
        echo "Waiting for retainr server on port 8000..."
        for i in {1..12}; do
          if curl -f http://localhost:8000/health; then
            echo "Server is healthy!"
            break
          else
            echo "Attempt $i: Server not ready, waiting..."
            if [ $i -eq 12 ]; then
              echo "Server failed to start, showing logs:"
              docker compose logs retainr
              exit 1
            fi
            sleep 10
          fi
        done

    - name: Run integration tests
      run: |
        pytest tests/integration/ -v

    - name: Test CLI functionality
      run: |
        # Install CLI dependencies in current Python environment
        pip install -e .

        # Test basic CLI commands
        python -m cli.main status

        # Test API endpoints
        curl -f http://localhost:8000/
        curl -f http://localhost:8000/health
        curl -X POST http://localhost:8000/mcp/tools/list

    - name: Show logs on failure
      if: failure()
      run: |
        echo "=== Server Logs ==="
        docker compose logs retainr
        echo "=== ChromaDB Logs ==="
        docker compose logs chroma

    - name: Clean up
      if: always()
      run: |
        docker compose down -v

  docker-test:
    name: Docker Build Test
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Create .env file for Docker Compose
      run: |
        cat > .env << EOF
        RETAINR_MEMORY_DIR=./memory
        RETAINR_CHROMA_HOST=chroma
        RETAINR_CHROMA_PORT=8000
        RETAINR_CHROMA_COLLECTION=retainr_memories
        RETAINR_EMBEDDING_MODEL=all-MiniLM-L6-v2
        EOF

    - name: Test Docker build
      run: |
        docker compose build

    - name: Test Docker services start
      run: |
        docker compose up -d
        sleep 30

        # Test that services are accessible
        curl -f http://localhost:8000/health

        # Clean up
        docker compose down

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run Bandit security scan
      run: |
        bandit -r mcp_server cli -f json -o bandit-report.json || true
        bandit -r mcp_server cli

    - name: Run Safety check
      run: |
        safety check --json --output safety-report.json || true
        safety check

    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  build-status:
    name: Build Status
    runs-on: ubuntu-latest
    needs: [lint, test, integration-test, docker-test, security-scan]
    if: always()

    steps:
    - name: Check build status
      run: |
        if [[ "${{ needs.lint.result }}" == "success" && \
              "${{ needs.test.result }}" == "success" && \
              "${{ needs.integration-test.result }}" == "success" && \
              "${{ needs.docker-test.result }}" == "success" && \
              "${{ needs.security-scan.result }}" == "success" ]]; then
          echo "✅ All checks passed!"
          exit 0
        else
          echo "❌ Some checks failed:"
          echo "Lint: ${{ needs.lint.result }}"
          echo "Test: ${{ needs.test.result }}"
          echo "Integration: ${{ needs.integration-test.result }}"
          echo "Docker: ${{ needs.docker-test.result }}"
          echo "Security: ${{ needs.security-scan.result }}"
          exit 1
        fi
