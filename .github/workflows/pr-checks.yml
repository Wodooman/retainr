name: PR Checks

on:
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened, ready_for_review]

env:
  PYTHON_VERSION: "3.11"

jobs:
  # Required check: Code formatting and linting
  code-quality:
    name: Code Quality (Required)
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements-dev.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt

    - name: Check code formatting with Black
      run: black --check --diff .

    - name: Lint with Ruff
      run: ruff check .

  # Required check: Unit tests
  unit-tests:
    name: Unit Tests (Required)
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    strategy:
      matrix:
        python-version: ["3.9", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-${{ matrix.python-version }}-pip-${{ hashFiles('**/requirements-dev.txt') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.python-version }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt

    - name: Run unit tests
      run: pytest tests/unit/ -v --cov=mcp_server --cov=cli --cov-report=xml

  # Required check: Security scan
  security-check:
    name: Security Check (Required)
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run Bandit security scan
      run: bandit -r mcp_server cli

    - name: Run Safety dependency check
      run: safety check

  # Required check: Docker build
  docker-build:
    name: Docker Build (Required)
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Test Docker build
      run: docker compose build

  # Optional check: Integration tests (informational)
  integration-tests:
    name: Integration Tests (Optional)
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    continue-on-error: true

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt

    - name: Start services with Docker Compose
      run: |
        docker compose up -d
        sleep 30

    - name: Wait for services to be healthy
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:8000/health; do sleep 5; done'

    - name: Run integration tests
      run: pytest tests/integration/ -v

    - name: Clean up
      if: always()
      run: docker compose down -v

  # Summary job that all required checks depend on
  pr-checks-summary:
    name: PR Checks Summary
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests, security-check, docker-build]
    if: always() && github.event.pull_request.draft == false

    steps:
    - name: Check all required jobs
      run: |
        echo "üîç Checking required PR checks..."
        echo "Code Quality: ${{ needs.code-quality.result }}"
        echo "Unit Tests: ${{ needs.unit-tests.result }}"
        echo "Security Check: ${{ needs.security-check.result }}"
        echo "Docker Build: ${{ needs.docker-build.result }}"

        if [[ "${{ needs.code-quality.result }}" == "success" && \
              "${{ needs.unit-tests.result }}" == "success" && \
              "${{ needs.security-check.result }}" == "success" && \
              "${{ needs.docker-build.result }}" == "success" ]]; then
          echo "‚úÖ All required PR checks passed!"
          echo "üöÄ PR is ready to merge"
        else
          echo "‚ùå Some required checks failed"
          echo "üö´ PR cannot be merged until all required checks pass"
          exit 1
        fi
